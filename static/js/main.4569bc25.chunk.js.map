{"version":3,"sources":["Components/FeaturedImage.js","Components/ImageGrid.js","Components/BreedSelect.js","App.js","serviceWorker.js","index.js"],"names":["FeaturedImage","props","className","src","featuredImage","message","alt","ImageGrid","imageGrid","map","image","key","toString","onClick","BreedSelect","Fragment","onChange","id","defaultValue","value","App","state","status","breed","handleUpdateImage","bind","handleChangeBreed","this","fetch","then","res","json","setState","evt","target","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.4569bc25.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction FeaturedImage(props) {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"jumbotron\">\r\n        <img src={props.featuredImage.message} alt=\"Featured\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FeaturedImage;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction ImageGrid(props) {\r\n  return (\r\n    <div className=\"container grid-container\">\r\n      {props.imageGrid.message.map((image) => {\r\n        return (\r\n          <div className=\"grid-items\" key={image.toString()}>\r\n            <img onClick={props.onClick}  src={image} alt=\"\" />\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageGrid;\r\n","import React from \"react\";\r\n\r\nfunction BreedSelect(props) {\r\n  return (\r\n    <React.Fragment>\r\n      <label>Select Breed: </label>\r\n      <select onChange={props.onChange} id=\"breeds\">\r\n        \r\n        <option defaultValue=\"Husky\">Husky</option>\r\n        <option value=\"Retriever\">Retriever</option>\r\n        <option value=\"Shiba\">Shiba</option>\r\n      </select>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default BreedSelect;\r\n","import React from \"react\";\r\nimport FeaturedImage from \"./Components/FeaturedImage\";\r\nimport ImageGrid from \"./Components/ImageGrid\";\r\nimport BreedSelect from \"./Components/BreedSelect\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      featuredImage: {},\r\n\r\n      imageGrid: {\r\n        message: [],\r\n        status: \"\",\r\n      },\r\n      breed: \"Husky\",\r\n    };\r\n    this.handleUpdateImage = this.handleUpdateImage.bind(this);\r\n    this.handleChangeBreed = this.handleChangeBreed.bind(this);\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"App\">\r\n          <div className=\"container\">\r\n            <div className=\"jumbotron\">\r\n              <h1 className=\"display-4\">{this.state.breed} Dog Gallery</h1>\r\n              <p className=\"lead\">ITMD-565 -hyang77@hawk.iit.edu</p>\r\n              <BreedSelect onChange={this.handleChangeBreed} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <FeaturedImage featuredImage={this.state.featuredImage} />\r\n        <ImageGrid\r\n          onClick={this.handleUpdateImage}\r\n          imageGrid={this.state.imageGrid}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://dog.ceo/api/breed/husky/images/random\")\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((json) => {\r\n        this.setState({\r\n          featuredImage: json,\r\n        });\r\n      });\r\n\r\n    fetch(\"https://dog.ceo/api/breed/husky/images/random/18\")\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((json) => {\r\n        this.setState({\r\n          imageGrid: json,\r\n        });\r\n      });\r\n  }\r\n\r\n  handleChangeBreed(evt) {\r\n    this.setState({ breed: evt.target.value });\r\n    if (evt.target.value === \"Husky\") {\r\n      fetch(\"https://dog.ceo/api/breed/husky/images/random\")\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((json) => {\r\n          this.setState({\r\n            featuredImage: json,\r\n          });\r\n        });\r\n\r\n      fetch(\"https://dog.ceo/api/breed/husky/images/random/18\")\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((json) => {\r\n          this.setState({\r\n            imageGrid: json,\r\n          });\r\n        });\r\n    } else if (evt.target.value === \"Shiba\") {\r\n      fetch(\"https://dog.ceo/api/breed/shiba/images/random\")\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((json) => {\r\n          this.setState({\r\n            featuredImage: json,\r\n          });\r\n        });\r\n\r\n      fetch(\"https://dog.ceo/api/breed/shiba/images/random/18\")\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((json) => {\r\n          this.setState({\r\n            imageGrid: json,\r\n          });\r\n        });\r\n    } else {\r\n      fetch(\"https://dog.ceo/api/breed/retriever/images/random\")\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((json) => {\r\n          this.setState({\r\n            featuredImage: json,\r\n          });\r\n        });\r\n\r\n      fetch(\"https://dog.ceo/api/breed/retriever/images/random/18\")\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((json) => {\r\n          this.setState({\r\n            imageGrid: json,\r\n          });\r\n        });\r\n    }\r\n  }\r\n\r\n  handleUpdateImage(evt) {\r\n    var featuredImage = { ...this.state.featuredImage };\r\n    featuredImage.message = evt.target.src;\r\n    this.setState({ featuredImage });\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}